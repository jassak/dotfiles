* Emacs Installation
** Macos
   =brew install emacs-plus@28 --with-modern-papirus-icon --with-xwidgets --with-mailutils=
   =ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications=
* Settings 
** spacemacs-theme
   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src
** No tool/scroll bar
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src
** menu-bar
   #+begin_src emacs-lisp
     (menu-bar-mode t)
   #+end_src
** No splash screen
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t
     inhibit-startup-echo-area-message t)
   #+end_src
** No beep
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** No backups/autosave
   #+begin_src emacs-lisp
     (setq make-backup-file nil)
     (setq auto-save-default nil)
   #+end_src
** Global line numbers
   #+begin_src emacs-lisp
     (global-linum-mode 1)
   #+end_src
** Highlight active line
   #+begin_src emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+end_src
** Do not wrap lines
   #+begin_src emacs-lisp
     (set-default 'truncate-lines t)
   #+end_src
** Smooth scrolling
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src
** y/n instead of yes/no
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Global prettify symbols
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode t)
   #+end_src
** ibuffer expert mode
   #+begin_src emacs-lisp
     (setq ibuffer-expert t)
   #+end_src
** config edit/reload
*** edit
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
*** reload
    #+begin_src emacs-lisp
      (defun config-reload ()
        (interactive)
        (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
      (global-set-key (kbd "C-c r") 'config-reload)
    #+end_src
** sane window splits
   #+begin_src emacs-lisp
     (defun split-window-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-window-and-follow-horizontally)
     (defun split-window-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-window-and-follow-vertically)
   #+end_src
** intelligent subwords
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** electric
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
                                 (?\( . ?\))
                                 (?\[ . ?\])
                                 (?\{ . ?\})
                                 ))
     (electric-pair-mode t)
     (add-function :before-until electric-pair-inhibit-predicate ;; disable for <>
       (lambda (c) (eq c ?<)))
   #+end_src
** line and column number on modline
   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+end_src
** kill current buffer without asking
   #+begin_src emacs-lisp
     (defun kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+end_src
* IDO
** enable IDO mode
  #+begin_src emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+end_src
** ido-vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :straight t
       :ensure t
       :init (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+end_src
* Org
*** org-tempo
  #+begin_src emacs-lisp
    (require 'org-tempo)
  #+end_src
*** org-bullets
    #+begin_src emacs-lisp
      (use-package org-bullets
        :straight t
        :ensure t
        :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
    #+end_src
* Terminal
  #+begin_src emacs-lisp
    (defvar my-term-shell "/bin/zsh")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)
    (global-set-key (kbd "<C-return>") 'ansi-term)
  #+end_src
* Packages
** better-defaults
   #+begin_src emacs-lisp
     (use-package better-defaults
       :straight t)
   #+end_src
** evil
   #+begin_src emacs-lisp
     (use-package evil
       :straight t
       :init (setq evil-split-window-below t
		   evil-vsplit-window-right t
		   evil-disable-insert-state-bindings t
		   evil-want-C-u-delete t
		   evil-want-C-u-scroll t
		   evil-want-Y-yank-to-eol t)
       :config (evil-mode t))
   #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :straight t
       :init (which-key-mode))
   #+end_src
** beacon
   #+begin_src emacs-lisp
     (use-package beacon
       :straight t
       :init (beacon-mode 1))
   #+end_src
** magit
   #+begin_src emacs-lisp
     (use-package magit
       :straight t)
   #+end_src
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :straight t
       :init (smex-initialize)
       :bind ("M-x" . smex))
   #+end_src
** avy
   #+begin_src emacs-lisp
     (use-package avy
       :straight t
       :bind ("M-s" . avy-goto-char))
   #+end_src
** evil-goggles
   #+begin_src emacs-lisp
     (use-package evil-goggles
       :straight t
       :init
       (setq evil-goggles-enable-change nil)
       :config
       (evil-goggles-mode)
       (evil-goggles-use-diff-faces))
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :straight t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :straight t)
   #+end_src
** dashboard
   #+begin_src emacs-lisp
     (use-package dashboard
       :straight t
       :init
       (add-hook 'after-init-hook 'dashboard-refresh-buffer)
       :config
       (setq dashboard-items '((recents . 10)
                               (projects . 3)
                               (agenda . 5)))
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (dashboard-setup-startup-hook))
   #+end_src
* Python
** elpy
   #+begin_src emacs-lisp
     (use-package elpy
       :straight t
       :ensure t
       :init (elpy-enable)
       :config (add-hook 'python-mode-hook (lambda () (hs-minor-mode))))
   #+end_src
** blacken
   #+begin_src emacs-lisp
     (use-package blacken
       :straight t)
   #+end_src
** ipython as python-shell-interpreter
   #+begin_src emacs-lisp
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "-i --simple-prompt")
   #+end_src
* Keybindings
*** other-window
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-o") 'other-window)
    #+end_src
*** buffer switching
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x b") 'ido-switch-buffer)
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src
*** vim-like window navigation
    #+begin_src emacs-lisp
      (define-key evil-normal-state-map (kbd "M-h") #'evil-window-left)
      (define-key evil-normal-state-map (kbd "M-j") #'evil-window-down)
      (define-key evil-normal-state-map (kbd "M-k") #'evil-window-up)
      (define-key evil-normal-state-map (kbd "M-l") #'evil-window-right)
    #+end_src
