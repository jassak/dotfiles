#+STARTUP: overview
* Emacs Installation
** Macos
   #+begin_src bash
     brew install emacs-plus@28 --with-modern-papirus-icon --with-xwidgets --with-mailutils
     ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications
   #+end_src
* Settings
** spacemacs-theme
   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src
** No tool/scroll bar
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src
** menu-bar
   #+begin_src emacs-lisp
     (menu-bar-mode t)
   #+end_src
** No splash screen
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t
     inhibit-startup-echo-area-message t)
   #+end_src
** No beep
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** No backups/autosave
   #+begin_src emacs-lisp
     (setq make-backup-file nil)
     (setq auto-save-default nil)
   #+end_src
** Global line numbers
   #+begin_src emacs-lisp
     (global-linum-mode 1)
   #+end_src
** Highlight active line
   #+begin_src emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+end_src
** Do not wrap lines
   #+begin_src emacs-lisp
     (set-default 'truncate-lines t)
   #+end_src
** Smooth scrolling
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src
** y/n instead of yes/no
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Global prettify symbols

     (global-prettify-symbols-mode t)
   #+end_src
** ibuffer expert mode
   #+begin_src emacs-lisp
     (setq ibuffer-expert t)
   #+end_src
** config edit/reload
*** edit
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
*** reload
    #+begin_src emacs-lisp
      (defun config-reload ()
        (interactive)
        (load-file (expand-file-name "~/.emacs.d/init.el")))
      (global-set-key (kbd "C-c r") 'config-reload)
    #+end_src
** sane window splits
   #+begin_src emacs-lisp
     (defun split-window-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-window-and-follow-horizontally)
     (defun split-window-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-window-and-follow-vertically)
   #+end_src
** intelligent subwords
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** electric
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
                                 (?\( . ?\))
                                 (?\[ . ?\])
                                 (?\{ . ?\})
                                 ))
     (electric-pair-mode t)
     (add-function :before-until electric-pair-inhibit-predicate ;; disable for <>
       (lambda (c) (eq c ?<)))
   #+end_src
** line and column number on modline
   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+end_src
** kill current buffer without asking
   #+begin_src emacs-lisp
     (defun kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+end_src
** clock
   #+begin_src emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+end_src
** set correct PATH variable
#+begin_src emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Sets the exec-path to the same value used by the user shell.
     Copied from https://emacs.stackexchange.com/a/4093."
    (let ((path-from-shell
           (replace-regexp-in-string
            "[[:space:]\n]*$" ""
            (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  ;; call function now
  (set-exec-path-from-shell-PATH)
#+end_src
* Modeline
** spaceline
   #+begin_src emacs-lisp
     (use-package spaceline
       :straight t
       :config (require 'spaceline-config)
       (spaceline-spacemacs-theme))
   #+end_src
** spaceline-all-the-icons
   #+begin_src emacs-lisp
     (use-package spaceline-all-the-icons
       :straight t
       :after spaceline
       :config
       (setq spaceline-all-the-icons-separator-type 'none)
       (spaceline-all-the-icons-theme))
   #+end_src
* IDO
** enable IDO mode
  #+begin_src emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+end_src
** ido-vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :straight t
       :ensure t
       :init (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+end_src
** flx-ido
   #+begin_src emacs-lisp
     (use-package flx-ido
       :straight t
       :config
       (flx-ido-mode 1)
       ;; disable ido faces to see flx highlights.
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil))
   #+end_src
* Org
** org-tempo
 #+begin_src emacs-lisp
   (require 'org-tempo)
 #+end_src
** org-bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :straight t
       :ensure t
       :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src
** org-log-done
   #+begin_src emacs-lisp
     (setq org-log-done 'time)
   #+end_src
** org-return-follow-link
   #+begin_src emacs-lisp
     (setq org-return-follows-link t)
   #+end_src
** COMMENT mix fixed-width with variable-width fonts
   #+begin_src emacs-lisp
     (dolist (face '(org-block-begin-line
                     org-block-end-line
                     org-verbatim
                     org-block-background))
       (set-face-attribute face nil :inherit 'fixed-pitch)
   #+end_src
** org files
   #+begin_src emacs-lisp
     (custom-set-variables
      '(org-directory "~/Dropbox/org/")
      '(org-default-notes-file (concat org-directory "notes.org"))
      '(org-startup-folded 'overview)
      '(org-startup-indented t))

     (setq org-agenda-files (list (concat org-directory "agenda.org")))
   #+end_src
** org capture templates
   #+begin_src emacs-lisp
     (setq org-capture-templates
           '(("a" "Appointment" entry
              (file+headline "~/Dropbox/org/agenda.org" "Appointments")
              "* %?\n:PROPERTIES:\n:ADDRESS: \n:DATE: %^T\n:END:")
             ("n" "Note" entry
              (file+headline "~/Dropbox/org/notes.org" "Notes")
              "* %?\n%T")
             ("l" "Link" entry
              (file+headline "~/Dropbox/org/links.org" "Links")
              "* %?\n%^L \n%T" :prepend t)
             ("t" "Task" entry
              (file+headline "~/Dropbox/org/tasks.org" "Tasks")
              "* TODO %?\n:DEADLINE: %^t\n%T" :prepend t)
             ("d" "Diary entry" entry
              (file+olp+datetree "~/Dropbox/org/diary.org")
              "* %U\n %?\n")
             ("s" "Snippet" entry
              (file+headline "~/Dropbox/org/snippets.org" "Snippets")
              "* %?\n%t")))
   #+end_src
* Packages
** better-defaults
   #+begin_src emacs-lisp
     (use-package better-defaults
       :straight t)
   #+end_src
** evil
   #+begin_src emacs-lisp
     (use-package evil
       :straight t
       :init (setq evil-split-window-below t
                   evil-vsplit-window-right t
                   evil-disable-insert-state-bindings t
                   evil-want-C-u-delete t
                   evil-want-C-u-scroll t
                   evil-want-Y-yank-to-eol t)
       :config (evil-mode t))
   #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :straight t
       :init (which-key-mode))
   #+end_src
** COMMENT beacon
   #+begin_src emacs-lisp
     (use-package beacon
       :straight t
       :init (beacon-mode 1))
   #+end_src
** magit
   #+begin_src emacs-lisp
     (use-package magit
       :straight t)
   #+end_src
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :straight t
       :init (smex-initialize)
       :bind ("s-x" . smex))
   #+end_src
** avy
   #+begin_src emacs-lisp
     (use-package avy
       :straight t
       :bind ("s-s" . avy-goto-char))
   #+end_src
** evil-goggles
   #+begin_src emacs-lisp
     (use-package evil-goggles
       :straight t
       :init
       (setq evil-goggles-enable-change nil)
       :config
       (evil-goggles-mode)
       (evil-goggles-use-diff-faces))
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :straight t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
** all-the-icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :straight t)
   #+end_src
** dashboard
   #+begin_src emacs-lisp
     (use-package dashboard
       :straight t
       :ensure t
       :init
       (add-hook 'after-init-hook 'dashboard-refresh-buffer)
       :config
       (setq show-week-agenda-p t)
       (setq dashboard-items '((recents . 5)
                               (agenda . 5)
                               (projects . 5)
                               (bookmarks . 5)))
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-center-content t)
       (setq dashboard-set-navigator t)
       (setq dashboard-set-footer nil)
       (setq dashboard-org-agenda-categories '("Tasks" "Appointments"))
       (dashboard-setup-startup-hook))
   #+end_src
** popup-kill-ring
   #+begin_src emacs-lisp
     (use-package popup-kill-ring
       :straight t
       :bind ("s-y" . popup-kill-ring)
       :config
       (setq popup-kill-ring-interactive-insert t))
   #+end_src
** COMMENT mixed-pitch
   #+begin_src emacs-lisp
     (use-package mixed-pitch
       :straight t
       :config
       (add-hook 'text-mode-hook #'mixed-pitch-mode))
   #+end_src
** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :straight t
       :config
       (use-package yasnippet-snippets
         :straight t)
       (yas-reload-all)
       (add-hook 'emacs-lisp-mode 'yas-minor-mode)
       (add-hook 'python-mode-hook 'yas-minor-mode))
   #+end_src
** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :straight t
       :config
       (projectile-global-mode)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-project-search-path '("~/projects/"))
       (setq projectile-auto-discover t)
       (setq projectile-completion-system 'ido))
   #+end_src
*** org-projectile
    #+begin_src emacs-lisp
      (use-package org-projectile
        :straight t
        :bind (("C-c t p" . org-projectile-project-todo-completing-read)
               ("C-c c" . org-capture))
        :config
        (progn
          (setq org-projectile-projects-file
                "~/Dropbox/org/projects.org")
          (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
          (push (org-projectile-project-todo-entry) org-capture-templates)))
    #+end_src
** undo-tree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :straight t
       :config (global-undo-tree-mode)
       (evil-set-undo-system 'undo-tree))
   #+end_src
** org-reveal
   #+begin_src emacs-lisp
     (use-package ox-reveal
       :straight t)
     (setq org-reveal-root "file:///Users/zazon/projects/reveal.js")
     (setq org-reveal-mathjax t)
   #+end_src
** htmlize
   #+begin_src emacs-lisp
     (use-package htmlize
       :straight t)
   #+end_src
* Autocompletion
** company-mode
   #+begin_src emacs-lisp
     (use-package company
       :straight t
       :init
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 3)
       (setq company-selection-wrap-around t)
       (add-hook 'after-init-hook 'global-company-mode))
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+end_src
** company-quickhelp
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :straight t
       :init (company-quickhelp-mode))
   #+end_src
* Python
** elpy
   #+begin_src emacs-lisp
     (use-package elpy
       :straight t
       :ensure t
       :init (elpy-enable)
       :config
       (add-hook 'python-mode-hook (lambda () (hs-minor-mode)))
       (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1))))
   #+end_src
** python as python-shell-interpreter
   #+begin_src emacs-lisp
     (setq python-shell-interpreter "python"
           python-shell-interpreter-args "-i")
   #+end_src
** COMMENT company-jedi
   #+begin_src emacs-lisp
     (use-package company-jedi
       :straight t)
     (defun my/python-mode-hook ()
       (add-to-list 'company-backends 'company-jedi))
     (add-hook 'python-mode-hook 'my/python-mode-hook)
   #+end_src
* Keybindings
*** other-window
    #+begin_src emacs-lisp
      (global-set-key (kbd "s-o") 'other-window)
    #+end_src
*** buffer switching
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x b") 'ido-switch-buffer)
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src
*** vim-like window navigation
    #+begin_src emacs-lisp
      (define-key evil-normal-state-map (kbd "s-h") #'evil-window-left)
      (define-key evil-normal-state-map (kbd "s-j") #'evil-window-down)
      (define-key evil-normal-state-map (kbd "s-k") #'evil-window-up)
      (define-key evil-normal-state-map (kbd "s-l") #'evil-window-right)
    #+end_src

* Terminal
We use =vterm= which seems faster than =ansi-term=. Installation:
#+begin_src bash
  brew install cmake
  brew install libtool
  cd emacs-libvterm
  mkdir -p build
  cd build
  cmake ..
  make
#+end_src
#+begin_src emacs-lisp
  (global-set-key (kbd "<s-return>") 'vterm)
  ;; (define-global-minor-mode my-evil-mode evil-mode
  ;;  (lambda ()
  ;;    (when (not (memq major-mode
  ;;                     (list 'vterm-mode 'shell-mode)))
  ;;      (evil-mode 1))))
  ;; (my-evil-mode 1)
#+end_src
*** TODO Find way to disable evil-mode for vterm buffers
** vterm
   #+begin_src emacs-lisp
     (use-package vterm
       :straight t
       :load-path  "/Users/zazon/.emacs.d/straight/build/vterm/vterm-module.so")
   #+end_src
   
   
